(define (union-set set1 set2)
  (cond ((and (null? set1) (null? set2)) '())
        ((null? set1) set2)
        ((null? set2) set1)
        (else (let ((current-of-set1 (car set1))
                    (reminder-of-set1 (cdr set1))
                    (current-of-set2 (car set2))
                    (reminder-of-set2 (cdr set2)))
                    (cond ((< current-of-set1 current-of-set2)
                              (cons current-of-set1 (union-set reminder-of-set1 set2)))
                          ((= current-of-set1 current-of-set2)
                              (cons current-of-set1 (union-set reminder-of-set1 reminder-of-set2)))
                          ((> current-of-set1 current-of-set2)
                              (cons current-of-set2 (union-set set1 reminder-of-set2))))))))


(union-set '() '())
(union-set '() (list 1 2 3))
(union-set (list 1 2 3) '())
(union-set (list 1 2 3) (list 1 3 5))
(union-set (list 1 2 3) (list 1 3 5 7 9))
